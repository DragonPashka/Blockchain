1. Введение

1.1. Назначение системы

1.2. Содержание системы (границы системы)

1.3. Обзор системы

1.3.1. Содержание системы

1.3.2. Функции системы

4. Термины и определения


2. Ссылки 

3. Системные требования 

3.1. Системные требования для ПК пользователя
3.1.1. Системные требования для сервера приложения
3.2.Требования к хранению данных
3.3 требования к языкам программирования
3.5. Требования к лингвистическому обеспечению
3.6. Требования к функциям (задачам), выполняемым приложением
3.6.1. Основные требования
3.7. Требования к юзабилити
3.8. Требования к производительности
Интерфейс (взаимодействие) системы
Операции системы
Посмотри, так я понял эти пункты
Для сервера
Для клиентского приложения

3.11. Состояния системы
3.12. Условия окружения
3.13. Управление информацией
3.14. Политики и правила
3.15. Требования к обслуживанию системы на протяжении ее жизненного цикла



4. Тестирование и проверка (список необходимых приемочных тестов, которые отражают зеркально раздел 3) 

5. Приложения 

1. Предположения и зависимости

2. Аббревиатуры и сокращений




1.Введение 
Требования к уникальности различных проектов и работ существовали и до эпохи интернета. Человеку, который их проверял приходилось использовать только свою память и эрудицию для того, чтобы выявить случаи плагиата. В наше время появились различные сервисы и программы для проверки уникальности текстов и файлов. Разработанный нашей командой проект: «Blockchain Authority» выделяется среди подобных сервисов. Главными его особенностью являются: использование технологии «блокчейн» для организации надежного и масштабируемого хранилища данных; это кроссплатформенное клиентское приложение с унифицированным интерфейсом, а также в нём отсутствует привязка к типам проверяемых файлов.

Назначение системы
Система «Blockchain Authority» предназначена для решения перечисленных ниже задач:
А) проверка файлов на оригинальность
Б) формирование и расширение базы данных уникальных файлов;
В) организация надежного и масштабируемого хранилища данных;
Г) обеспечение комфортного использования для пользователей различных платформ; 

1.2. Содержание системы
Система в себе содержит следующие компоненты: 
ПО - серверная часть;
ПО - клиентская часть;
Сервер для обработки пользовательских запросов;
Клиентский компьютер для запуска клиентского приложения;

1.3. Обзор системы
1.3.1. Функции системы
Не понимат что писат
1.4. Термины и определения 

Пользователь – человек, использующий данную систему для выполнения определенных функций.
Кроссплатформенность— способность программного обеспечения работать более чем на одной аппаратной платформе и (или) операционной системе.
Блокчейн — выстроенная по определённым правилам непрерывная последовательная цепочка блоков (связный список), содержащих информацию.
ПО – программное обеспечение. Программа, или набор программ для корректной работы данной системы.
Хэш – необратимое отражение из одного множества в другое
ПК – персональный компьютер. Рабочая станция, которую использует пользователь
ДОБАВИТЬ ПРО ХЭШ
Ссылки:
ДОБАВИТЬ ССЫЛКИ КАКИЕ-ТО (на проект?)
Общие требования к системе
Системные требования для ПК пользователя



Рекомендованные системные требования
Операционная система
Windows 7 32-bit
Процессор
Intel Core 2 Duo/ AMD Athlon 64 X2 Dual-Core 
1 ГГЦ
Оперативная память
1 Гб ОЗУ
Свободное место на жёстком диске
300 МБ
Скорость Интернет-соединения 
1 Мб/сек

3.1.1. Системные требования для сервера приложения

Рекомендованные системные требования





















Требования к хранению данных
ПОКА ПОД ВОПРОСИКОМ

Требования к языкам программирования
При разработке системы должен использоваться следующие языки программирования: 
Для сервера –java;
Для клиентского приложения – Node.js нужное дописать
3.5. Требования к лингвистическому обеспечению
У нас английская версия или можно выбрать язык?
3.6. Требования к функциям (задачам), выполняемым приложением
3.6.1. Основные требования
Разрабатываемый программный продукт должен предоставлять пользователю возможность загружать файлы любого типа, а также хранить и проверять на уникальность, загруженные пользователем данные.  
3.7. Требования к юзабилити
Аще хз что писать
3.8. Требования к производительности
Как я понял (нагуглил) на эти вопросики дать ответы?
Какие задачи система должна делать наиболее быстро?
Для какой нагрузки (для какого количества параллельных задач)?
Собираемся мы обслуживать нашим серверным приложением 300 одновременных пользователей? 1000? 10 000?
C какой скоростью?
Скорость ответа(далее Latency) - какая средняя скорость ответа? Какая максимальная и минимальная?
Пропускная способность(далее Bandwitch) - сколько запросов в минуту выполнено?
Количество ошибок(далее Error rate) - сколько запросов приложение не смогло выполнить?
Интерфейс (взаимодействие) системы
Наделай скриншотиков, а там разберёмся 

Операции системы
Для сервера
создание хранилища хэшей на основе технологии блокчейн
генерация хэшей из принимаемых файлов по заданному алгоритму
веб-сервер и обработка пользовательских запросов по HTTP методом POST
возврат бинарных ответов вида "success"/"Failure" на запросы клиентского приложения

3.10.2 Для клиентского приложения:
добавление одного или нескольких файлов любого расширения с пользовательского компьютера для проверки в очередь загрузки
добавление простого текста через текстовое поле вместо файла из файловой системы
генерация и отправка HTTP-запросов с файлами методом POST на сервер для проверки файлов, добавленных в очередь
обработка ответов сервера

3.11. Состояния системы
??????????????
3.12. Условия окружения
??????????????
3.13. Управление информацией
??????????????
3.14. Политики и правила
??????????????
3.15. Требования к обслуживанию системы на протяжении ее жизненного цикла
??????????????

4. Тестирование и проверка (ЭМММММММММММММММММММММ) 
5. Приложения (Сюда добавить строчки кода?)
1. Предположения и зависимости (странный пункт)

2. Аббревиатуры и сокращений

